{"version":3,"sources":["components/ContactListItem/ContactListItem.module.scss","components/Filter/Filter.module.scss","components/ContactList/ContactList.module.scss","redux/phonebook/phonebook-actions.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/phonebook/phonebook-reducers.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.scss"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuid","removeContact","changeFilter","INITIAL_STATE","ContactForm","state","handleChangeForm","target","value","setState","handleFormSubmit","event","preventDefault","props","contacts","find","el","alert","resetForm","onSubmit","className","styles","form","this","label","input","type","pattern","title","placeholder","required","onChange","button","Component","connect","items","dispatch","actions","ContactListItem","onClick","item","getVisibleContacts","filter","contact","toLowerCase","includes","list","action","length","map","e","filterLabel","App","createReducer","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","reducers","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.659fe7ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactListItem_item__1syfj\",\"button\":\"ContactListItem_button__1o2rO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"Filter_filterLabel__3rYHG\",\"input\":\"Filter_input__2SdOq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3TUeO\"};","import { v4 as uuid } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', ({ name, number }) => ({\n  payload: {\n    id: uuid(),\n    name,\n    number,\n  },\n}));\nconst removeContact = createAction('contacts/remove');\n\nconst changeFilter = createAction('contacts/changeFilter');\n\nexport default { addContact, removeContact, changeFilter };","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from \"prop-types\";\nimport actions from '../../redux/phonebook/phonebook-actions';\nimport styles from './ContactForm.module.scss';\n\nconst INITIAL_STATE = {\n  name: '',\n  number: '',\n};\n\nclass ContactForm extends Component {\n  state = INITIAL_STATE\n\n  handleChangeForm = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.props.contacts.find((el) => el.name === this.state.name)) {\n      alert('Contact is already in contacts.');\n      this.resetForm();\n      return;\n    }\n    \n    this.props.onSubmit(this.state);\n    this.resetForm();\n  };\n\n  resetForm = () => this.setState(INITIAL_STATE);\n\n  render() {\n    return (\n      <form className={styles.form} onSubmit={this.handleFormSubmit}>\n        <label className={styles.label}>Name\n          <input\n            className={styles.input}\n            type='text'\n            name='name'\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            placeholder='Enter name'\n            required\n            value={this.state.name}\n            onChange={this.handleChangeForm}\n          />\n        </label>\n\n        <label className={styles.label}>Number\n          <input            \n            className={styles.input}\n            type='tel'\n            name='number'\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            placeholder='Enter phone number'\n            required\n            value={this.state.number}\n            onChange={this.handleChangeForm} />\n        </label>\n        <button className={styles.button} type='submit'>Add contact</button>\n      </form>\n    )\n  }\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return { contacts: state.contacts.items };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) => dispatch(actions.addContact(name, number)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\nimport styles from './ContactListItem.module.scss';\n\nconst ContactListItem = ({ id, name, number, onClick }) => {\n  return (\n    <li className={styles.item}>{name}: {number}\n      <button className={styles.button} type='button' onClick={() => { onClick(id) }}>\n        Delete\n      </button>\n    </li>\n  )\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\nexport default ContactListItem;","import { connect } from 'react-redux';\nimport action from '../../redux/phonebook/phonebook-actions';\nimport PropTypes from 'prop-types';\nimport ContactListItem from '../ContactListItem';\nimport styles from './ContactList.module.scss';\n\n\nconst ContactList = ({ list, onClick }) => {\n  if (list.length === 0) return null\n  return (\n    <ul className={styles.list}>\n      {list.map((item) => (\n        <ContactListItem key={item.id} id={item.id} name={item.name} number={item.number} onClick ={onClick} />\n      ))}\n    </ul>\n  )\n};\n\nContactList.propTypes = {\n  list: PropTypes.array.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nconst getVisibleContacts = (items, filter) => {\n    return items.filter((contact) => contact.name.toLowerCase().includes(filter.toLowerCase()))\n};\n\nconst mapStateToProps = state => ({\n  list: getVisibleContacts(state.contacts.items, state.contacts.filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClick: (id) => dispatch(action.removeContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import PropTypes from \"prop-types\";\nimport { connect } from 'react-redux';\nimport action from '../../redux/phonebook/phonebook-actions';\nimport styles from './Filter.module.scss';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className={styles.filterLabel}>\n      Find contacts by name\n      <input className={styles.input}\n        type='text'\n        name='filter'\n        value={value}\n        onChange={onChange}\n        placeholder='Enter name for Search'\n      />\n    </label>\n  )\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: (e) => dispatch(action.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { Component } from 'react';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    )\n  }\n};\n\nexport default App;","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from \"./phonebook-actions\";\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.removeContact]: (state, { payload }) => state.filter((el) => el.id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [actions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({ items, filter, });","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n    persistStore,\n    persistReducer,\n    FLUSH,\n    REHYDRATE,\n    PAUSE,\n    PERSIST,\n    PURGE,\n    REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport reducers from './phonebook/phonebook-reducers';\n\nconst contactsPersistConfig = {\n    key: 'contacts',\n    storage,\n    blacklist: [\"filter\"],\n};\n\nconst middleware = [...getDefaultMiddleware({\n    serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n}), logger];\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, reducers),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\nconst persistor = persistStore(store);\n\nexport default { store, persistor };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n    <PersistGate loading={null} persistor={store.persistor}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n    </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1xqM4\",\"label\":\"ContactForm_label__2eZYL\",\"input\":\"ContactForm_input__3q_9b\",\"button\":\"ContactForm_button__2WW83\"};"],"sourceRoot":""}